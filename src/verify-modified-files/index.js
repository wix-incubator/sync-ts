const _ = require(`lodash`);
const didPropsChange = require(`./props-change-checker`);
const messages = require('./messages');

const getTypescriptDescriptorPath = fileRelativePath => {
  const lastSlashIndex = fileRelativePath.lastIndexOf(`/`);
  const fileFolderPath = fileRelativePath.substring(0, lastSlashIndex + 1);
  return `${fileFolderPath}index.d.ts`;
};

const getFilesWithModifiedProps = modifiedFiles => {
  const filesWithModifiedProps = [];

  Object.keys(modifiedFiles).forEach(fileRelativePath => {
    const { contentFromSourceBranch, contentFromPr } = modifiedFiles[
      fileRelativePath
    ];
    const { changeDetected, changeMessage } = didPropsChange(
      contentFromSourceBranch,
      contentFromPr,
    );
    if (changeDetected) {
      filesWithModifiedProps.push({
        fileRelativePath,
        changeMessage,
      });
    }
  });

  return filesWithModifiedProps;
};

const getInvalidFiles = modifiedFiles => {
  const filesWithModifiedProps = getFilesWithModifiedProps(modifiedFiles);

  return _.filter(filesWithModifiedProps, file => {
    const typescriptDescriptorRelativePath = getTypescriptDescriptorPath(
      file.fileRelativePath,
    );
    return !modifiedFiles[typescriptDescriptorRelativePath];
  });
};

const index = modifiedFiles => {
  const invalidFilesList = getInvalidFiles(modifiedFiles);
  if (!invalidFilesList.length) {
    return;
  }

  invalidFilesList.forEach(invalidFile => {
    console.error(
      messages.fileChanged(
        invalidFile.fileRelativePath,
        invalidFile.changeMessage,
      ),
    );
  });

  throw new Error(messages.verificationFailed());
};

module.exports = index;
//
// const ourFirstPRFiles = {
//   'scripts/syncTS.sh': {
//     contentFromPr:
//       '#!/usr/bin/env bash\n\nset -e\n\necho Checking prop type changes against d.ts files...\n\nif [ \\"$agentType\\" = \\"pullrequest\\" ]\n  then\n    echo breaking build\n    echo agentType: $agentType\n    exit 1\n  else\n    echo not breaking build - not a PR\nfi\n',
//     contentFromMaster: '',
//   },
//   'package.json': {
//     contentFromPr:
//       '{\n  "name": "wix-style-react",\n  "description": "wix-style-react",\n  "version": "7.45.0",\n  "main": "./dist/src/index.js",\n  "module": "./dist/es/src/index.js",\n  "sideEffects": [\n    "./.storybook/**/*.*",\n    "./stories/**/*.*",\n    "./src/**/*.scss"\n  ],\n  "files": [\n    "dist",\n    "beta",\n    "src",\n    "scripts",\n    "babel.config.js",\n    "testkit",\n    "es",\n    "new-icons",\n    "*.scss",\n    "*.js",\n    "*.d.ts"\n  ],\n  "scripts": {\n    "------shared prebuilds (try to make them in watch mode)": "",\n    "prestorybook": "./scripts/ensure-dist.sh && npm run generate-autodocs-registry",\n    "generate-autodocs-registry": "node scripts/generate-autodocs-registry",\n    "storybook:build": "npm run prestorybook && build-storybook -s ./src/assets",\n    "proxy-wix-ui-icons": "node scripts/proxy-wix-ui-icons",\n    "------new components generators": "",\n    "generate": "wuf generate --output src --codemods .wuf/generator/codemods --templates .wuf/generator/templates",\n    "postgenerate": "npm run update-components",\n    "generate:beta": "wuf generate --output src/beta --codemods .wuf/beta/generator/codemods --templates .wuf/generator/templates/src",\n    "postgenerate:beta": "npm run update-components:beta",\n    "------start/watch modes (can also be used for testing against start)": "",\n    "start": "./scripts/npm-start.sh",\n    "storybook": "npm run prestorybook && start-storybook -s ./src/assets -p 6006",\n    "storybook:visual": "start-storybook -c ./.storybook/visual -p 6007",\n    "storybook:e2e": "start-storybook -c ./.storybook/e2e -p 6008",\n    "------test": "",\n    "pretest": "if [ ! \\"$agentType\\" = \\"pullrequest\\" ]; then npm run lint && ./scripts/ensure-dist.sh; fi",\n    "test": "if [ ! \\"$agentType\\" = \\"pullrequest\\" ]; then npm run test:unit && npm run test:visual && npm run test:e2e && npm run test:types && npm run sanity; fi",\n    "test:unit": "yoshi test --jest",\n    "test:watch": "yoshi test --jest --watch",\n    "pretest:e2e": "./scripts/ensure-dist.sh",\n    "test:e2e": "npm run test:e2e-runtime && build-storybook -c ./.storybook/e2e && npm run test:e2e-only",\n    "test:e2e-only": "NODE_ENV=production yoshi test --protractor",\n    "test:e2e-runtime": "cd ./test-runtime/imports && NODE_ENV=production npm run test",\n    "test:visual": "eyes-storybook -c ./.storybook/visual",\n    "test:chromatic": "chromatic --build-script-name=storybook:build-visual --app-code=$CHROMATIC_WIX_STYLE_REACT",\n    "test:types": "tsc -p tsconfig.declarations.json && npm run pr-storybook:publish",\n    "test:performance": "npm run transpile && npm run bundles:generate && npm install --no-save @wix/perfer && perfer --verbose",\n    "bundles:generate": "npm run build --prefix .perfer",\n    "sanity": "autotools-sanity --files \'./src/**/*.meta.js\'",\n    "------build steps": "",\n    "prebuild": "npm run update-components && npm run update-components:beta && ./scripts/syncTS.sh",\n    "build": "npm run proxy-wix-ui-icons && npm run transpile && npm run build-puppeteer-testkit",\n    "postbuild": "npm run copy-public-styles && npm run export-components",\n    "update-components": ".wuf/update-components.sh",\n    "update-components:beta": ".wuf/update-components-beta.sh",\n    "lint": "yoshi lint --fix",\n    "copy-public-styles": "cp src/*.scss .",\n    "bundle": "webpack --config ./node_modules/yoshi/config/webpack.config.client.js --debug --display-error-details --progress",\n    "transpile": "node ./scripts/transpile.js",\n    "build-puppeteer-testkit": "webpack --config ./testkit/webpack.config.js",\n    "export-components": "import-path --path src --dts",\n    "storybook:build-visual": "build-storybook -c ./.storybook/visual",\n    "------publish": "",\n    "postpublish": "if [ \\"$NPM_PUBLISH_TYPE\\" == \\"re-publish\\" ]; then npm install && npm run build && npm run storybook:build && npm run zeit-storybook-deploy; fi",\n    "pr-storybook:publish": "if [  \\"$agentType\\" = \\"pullrequest\\" ]; then npm run storybook:build && npm install @wix/teamcity-surge-autorelease@^1.0.0 --no-save && teamcity-surge-autorelease; fi;",\n    "zeit-storybook-deploy": "node ./scripts/zeit-deploy.js ",\n    "------CI Parallel tasks (as in .ci_config)": "",\n    "test1:unit": "npm run test:unit",\n    "test2:visual": "npm run test:visual",\n    "test3:e2e": "YOSHI_PROTRACTOR_CONFIG=./protractor1.conf.js npm run test:e2e",\n    "test4:e2e": "YOSHI_PROTRACTOR_CONFIG=./protractor2.conf.js npm run test:e2e",\n    "test5:types": "npm run test:types",\n    "test6:sanity": "npm run lint && npm run sanity",\n    "test7:performance": "npm run test:performance",\n    "test8:chromatic": "echo ok",\n    "------performance analysis tools": "",\n    "bundles:analyse": "npm run analyse --prefix .perfer",\n    "------can be removed?": "",\n    "storybook:named-imports": " npm run transpile && start-storybook -c ./test-runtime/imports/.storybook -p 6009",\n    "travis": "npm run lint && npm run proxy-wix-ui-icons && npm run transpile && npm run test:unit -- --maxWorkers=4",\n    "transpile:watch": "babel src --out-dir dist/es/src --copy-files --watch --plugins=@babel/plugin-syntax-dynamic-import",\n    "make-async-spec": "npx jscodeshift -t scripts/unidriver-migration/src/make-async/make-async.js",\n    "------END": ""\n  },\n  "husky": {\n    "hooks": {\n      "pre-commit": "lint-staged"\n    }\n  },\n  "yoshi": {\n    "entry": {\n      "app": "index.js"\n    },\n    "externals": {\n      "react": "React",\n      "react-dom": "ReactDOM",\n      "Wix": "Wix"\n    },\n    "externalUnprocessedModules": [\n      "get-own-enumerable-property-symbols",\n      "stringify-object"\n    ],\n    "exports": "wix-style-react"\n  },\n  "repository": {\n    "type": "git",\n    "url": "git+https://github.com/wix/wix-style-react.git"\n  },\n  "license": "MIT",\n  "bugs": {\n    "url": "https://github.com/wix/wix-style-react/issues"\n  },\n  "homepage": "https://github.com/wix/wix-style-react#readme",\n  "devDependencies": {\n    "@applitools/eyes-storybook": "^3.2.5",\n    "@babel/cli": "^7.2.3",\n    "@babel/core": "^7.2.2",\n    "@babel/parser": "^7.3.1",\n    "@babel/plugin-proposal-class-properties": "^7.3.0",\n    "@babel/plugin-proposal-export-namespace-from": "^7.2.0",\n    "@babel/plugin-transform-modules-commonjs": "^7.2.0",\n    "@babel/plugin-transform-runtime": "7.2.0",\n    "@babel/preset-env": "^7.3.1",\n    "@babel/preset-react": "^7.0.0",\n    "@babel/register": "^7.8.3",\n    "@storybook/addon-google-analytics": "^5.3.0",\n    "@storybook/addon-links": "^5.3.0",\n    "@storybook/addon-options": "^5.3.0",\n    "@storybook/react": "^5.3.0",\n    "@stylable/dom-test-kit": "^0.1.6",\n    "@testing-library/react": "^8.0.1",\n    "@types/enzyme": "^3.9.1",\n    "@types/node": "^12.12.22",\n    "@types/react": "16.8.4",\n    "@types/react-dom": "^16.0.5",\n    "@ui-autotools/registry": "^3.4.0",\n    "@ui-autotools/sanity": "^2.8.2",\n    "babel-loader": "^8.0.5",\n    "babel-plugin-dynamic-import-node": "^2.3.0",\n    "babel-preset-yoshi": "^4.23.0",\n    "concurrently": "^3.4.0",\n    "copy": "^0.3.2",\n    "enzyme": "^3.3.0",\n    "enzyme-adapter-react-16": "^1.2.0",\n    "eslint-plugin-react": "^6.8.0",\n    "execa": "^1.0.0",\n    "express": "^4.16.4",\n    "eyes.it": "^2.0.0",\n    "husky": "^2.3.0",\n    "identity-obj-proxy": "^3.0.0",\n    "import-path": "^1.0.0",\n    "jest-yoshi-preset": "^4.10.3",\n    "lint-staged": "^7.3.0",\n    "mkdirp": "^0.5.1",\n    "ora": "^3.0.0",\n    "progress": "^2.0.3",\n    "prompts": "^1.2.1",\n    "protractor": "^5.4.1",\n    "puppeteer": "^1.12.2",\n    "query-string": "^6.1.0",\n    "react": "~16.8.3",\n    "react-dnd-test-backend": "^5.0.1",\n    "react-dom": "~16.8.3",\n    "react-element-to-jsx-string": "^14.0.0",\n    "react-test-renderer": "^16.0.0",\n    "react-test-utils": "^0.0.1",\n    "regenerator-runtime": "^0.11.0",\n    "rimraf": "^2.6.3",\n    "sinon": "^1.17.6",\n    "storybook-addon-i18n": "^5.1.13",\n    "jest": "^24.9.0",\n    "storybook-chromatic": "^3.5.0",\n    "storybook-snapper": "^1.0.8",\n    "typescript": "~3.7.5",\n    "velocity": "^0.7.2",\n    "wait-for-cond": "^1.0.3",\n    "webpack": "^4.41.1",\n    "webpack-cli": "^3.2.3",\n    "wix-storybook-utils": "^3.0.66",\n    "wix-ui-framework": "^3.1.1",\n    "yoshi": "^4.19.0",\n    "yoshi-config": "^4.17.0",\n    "yoshi-helpers": "^4.18.0",\n    "yoshi-runtime": "^1.0.190",\n    "yoshi-style-dependencies": "^4.22.0"\n  },\n  "peerDependencies": {\n    "react": "^16.0.0",\n    "react-dom": "^16.0.0"\n  },\n  "publishConfig": {\n    "registry": "https://registry.npmjs.org/",\n    "logLevel": "verbose"\n  },\n  "dependencies": {\n    "@babel/runtime": "^7.3.1",\n    "@loadable/component": "^5.10.3",\n    "bootstrap-sass": "^3.3.7",\n    "classnames": "^2.2.5",\n    "color": "^2.0.0",\n    "create-react-context": "^0.2.2",\n    "css-element-queries": "^1.1.1",\n    "date-fns": "^1.29.0",\n    "difference": "^1.0.2",\n    "dnd-core": "^2.6.0",\n    "draft-convert": "^2.1.8",\n    "draft-js": "^0.10.5",\n    "draft-js-export-html": "^1.3.3",\n    "gradient-parser": "^0.1.5",\n    "hoist-non-react-methods": "^1.1.0",\n    "lodash": "^4.17.4",\n    "moment": "2.22.2",\n    "omit": "^1.0.1",\n    "popper.js": "^1.14.5",\n    "prop-types": "^15.5.8",\n    "rc-slider": "^9.2.0",\n    "react-collapse": "^4.0.3",\n    "react-day-picker": "^7.0.7",\n    "react-dnd": "^2.5.1",\n    "react-dnd-html5-backend": "^5.0.1",\n    "react-modal": "^3.3.2",\n    "react-motion": "^0.5.2",\n    "react-portal": "^4.1.5",\n    "react-slick": "^0.24.0",\n    "react-transition-group": "^2.2.1",\n    "react-window": "^1.7.1",\n    "shallowequal": "^1.1.0",\n    "slick-carousel": "^1.8.1",\n    "wix-animations": "^1.0.276",\n    "wix-eventually": "^2.2.0",\n    "wix-ui-backoffice": "^1.0.339",\n    "wix-ui-core": "^2.0.831",\n    "wix-ui-icons-common": "^2.0.60",\n    "wix-ui-test-utils": "^1.0.151"\n  },\n  "lint-staged": {\n    "linters": {\n      "*.{js,scss}": [\n        "yoshi lint --fix",\n        "git add"\n      ]\n    },\n    "ignore": [\n      ".wuf/generator/templates/**"\n    ]\n  },\n  "jest": {\n    "setupFiles": [\n      "<rootDir>/test/jest-setup.js"\n    ],\n    "setupFilesAfterEnv": [\n      "wix-ui-test-utils/jest-setup"\n    ],\n    "moduleNameMapper": {\n      "\\\\.(?!\\\\st).(css|less|scss)$": "identity-obj-proxy"\n    },\n    "testPathIgnorePatterns": [\n      "<rootDir>/dist/",\n      "<rootDir>/node_modules/",\n      "<rootDir>/test-runtime/",\n      "<rootDir>/.wuf"\n    ]\n  },\n  "eslintConfig": {\n    "extends": "yoshi",\n    "env": {\n      "jest": true\n    },\n    "parserOptions": {\n      "ecmaFeatures": {\n        "legacyDecorators": true\n      }\n    },\n    "rules": {\n      "import/no-unresolved": 0,\n      "jsx-a11y/alt-text": 0,\n      "jsx-a11y/anchor-is-valid": 0,\n      "react/forbid-foreign-prop-types": 0,\n      "react/jsx-handler-names": 0,\n      "react/no-find-dom-node": 0,\n      "react/no-string-refs": 0,\n      "react/jsx-boolean-value": 2,\n      "no-restricted-properties": [\n        "error",\n        {\n          "object": "browser",\n          "property": "pause",\n          "message": "Do not commit browser.pause()."\n        },\n        {\n          "object": "browser",\n          "property": "sleep",\n          "message": "Do not commit browser.sleep()."\n        },\n        {\n          "object": "eyes",\n          "property": "fit",\n          "message": "Do not commit eyes.fit()."\n        }\n      ],\n      "no-restricted-globals": [\n        "error",\n        "fdescribe",\n        "fit",\n        {\n          "name": "Proxy",\n          "message": "Proxy not supported in IE11."\n        }\n      ],\n      "no-restricted-imports": [\n        "error",\n        {\n          "patterns": [\n            "wix-ui-core/*",\n            "!wix-ui-core/dist",\n            "!wix-ui-core/drivers"\n          ],\n          "paths": [\n            {\n              "name": "lodash/isObject",\n              "message": "Please use {isObject} from src/utils/operators"\n            },\n            {\n              "name": "lodash/mapValue",\n              "message": "Please use {mapValue} from src/utils/operators"\n            },\n            {\n              "name": "lodash/pick",\n              "message": "Please use {pick} from src/utils/operators"\n            },\n            {\n              "name": "lodash/pickBy",\n              "message": "Please use {pickBy} from src/utils/operators"\n            },\n            {\n              "name": "lodash/range",\n              "message": "Please use {range} from src/utils/operators"\n            },\n            {\n              "name": "lodash/times",\n              "message": "Please use {times} from src/utils/operators"\n            },\n            {\n              "name": "lodash/values",\n              "message": "Please use {values} from src/utils/operators"\n            }\n          ]\n        }\n      ],\n      "no-console": "error"\n    },\n    "overrides": [\n      {\n        "files": [\n          "**/*.uni.driver.js"\n        ],\n        "rules": {\n          "no-restricted-imports": [\n            "error",\n            {\n              "patterns": [\n                "*.st.css",\n                "*.scss"\n              ]\n            }\n          ],\n          "no-restricted-properties": [\n            "error",\n            {\n              "property": "getNative",\n              "message": "Do not use getNative() in Unidrivers unless a method needs to return an HTMLElement (In which case, that method also need to be deprecated!)."\n            }\n          ]\n        }\n      },\n      {\n        "files": [\n          "**/*private.uni.driver.js"\n        ],\n        "rules": {\n          "no-restricted-properties": [\n            "off",\n            {\n              "property": "getNative",\n              "message": "getNative is allowed in private drivers"\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n',
//     contentFromMaster:
//       '{\n  "name": "wix-style-react",\n  "description": "wix-style-react",\n  "version": "7.45.0",\n  "main": "./dist/src/index.js",\n  "module": "./dist/es/src/index.js",\n  "sideEffects": [\n    "./.storybook/**/*.*",\n    "./stories/**/*.*",\n    "./src/**/*.scss"\n  ],\n  "files": [\n    "dist",\n    "beta",\n    "src",\n    "scripts",\n    "babel.config.js",\n    "testkit",\n    "es",\n    "new-icons",\n    "*.scss",\n    "*.js",\n    "*.d.ts"\n  ],\n  "scripts": {\n    "------shared prebuilds (try to make them in watch mode)": "",\n    "prestorybook": "./scripts/ensure-dist.sh && npm run generate-autodocs-registry",\n    "generate-autodocs-registry": "node scripts/generate-autodocs-registry",\n    "storybook:build": "npm run prestorybook && build-storybook -s ./src/assets",\n    "proxy-wix-ui-icons": "node scripts/proxy-wix-ui-icons",\n    "------new components generators": "",\n    "generate": "wuf generate --output src --codemods .wuf/generator/codemods --templates .wuf/generator/templates",\n    "postgenerate": "npm run update-components",\n    "generate:beta": "wuf generate --output src/beta --codemods .wuf/beta/generator/codemods --templates .wuf/generator/templates/src",\n    "postgenerate:beta": "npm run update-components:beta",\n    "------start/watch modes (can also be used for testing against start)": "",\n    "start": "./scripts/npm-start.sh",\n    "storybook": "npm run prestorybook && start-storybook -s ./src/assets -p 6006",\n    "storybook:visual": "start-storybook -c ./.storybook/visual -p 6007",\n    "storybook:e2e": "start-storybook -c ./.storybook/e2e -p 6008",\n    "------test": "",\n    "pretest": "if [ ! \\"$agentType\\" = \\"pullrequest\\" ]; then npm run lint && ./scripts/ensure-dist.sh; fi",\n    "test": "if [ ! \\"$agentType\\" = \\"pullrequest\\" ]; then npm run test:unit && npm run test:visual && npm run test:e2e && npm run test:types && npm run sanity; fi",\n    "test:unit": "yoshi test --jest",\n    "test:watch": "yoshi test --jest --watch",\n    "pretest:e2e": "./scripts/ensure-dist.sh",\n    "test:e2e": "npm run test:e2e-runtime && build-storybook -c ./.storybook/e2e && npm run test:e2e-only",\n    "test:e2e-only": "NODE_ENV=production yoshi test --protractor",\n    "test:e2e-runtime": "cd ./test-runtime/imports && NODE_ENV=production npm run test",\n    "test:visual": "eyes-storybook -c ./.storybook/visual",\n    "test:chromatic": "chromatic --build-script-name=storybook:build-visual --app-code=$CHROMATIC_WIX_STYLE_REACT",\n    "test:types": "tsc -p tsconfig.declarations.json && npm run pr-storybook:publish",\n    "test:performance": "npm run transpile && npm run bundles:generate && npm install --no-save @wix/perfer && perfer --verbose",\n    "bundles:generate": "npm run build --prefix .perfer",\n    "sanity": "autotools-sanity --files \'./src/**/*.meta.js\'",\n    "------build steps": "",\n    "prebuild": "npm run update-components && npm run update-components:beta",\n    "build": "npm run proxy-wix-ui-icons && npm run transpile && npm run build-puppeteer-testkit",\n    "postbuild": "npm run copy-public-styles && npm run export-components",\n    "update-components": ".wuf/update-components.sh",\n    "update-components:beta": ".wuf/update-components-beta.sh",\n    "lint": "yoshi lint --fix",\n    "copy-public-styles": "cp src/*.scss .",\n    "bundle": "webpack --config ./node_modules/yoshi/config/webpack.config.client.js --debug --display-error-details --progress",\n    "transpile": "node ./scripts/transpile.js",\n    "build-puppeteer-testkit": "webpack --config ./testkit/webpack.config.js",\n    "export-components": "import-path --path src --dts",\n    "storybook:build-visual": "build-storybook -c ./.storybook/visual",\n    "------publish": "",\n    "postpublish": "if [ \\"$NPM_PUBLISH_TYPE\\" == \\"re-publish\\" ]; then npm install && npm run build && npm run storybook:build && npm run zeit-storybook-deploy; fi",\n    "pr-storybook:publish": "if [  \\"$agentType\\" = \\"pullrequest\\" ]; then npm run storybook:build && npm install @wix/teamcity-surge-autorelease@^1.0.0 --no-save && teamcity-surge-autorelease; fi;",\n    "zeit-storybook-deploy": "node ./scripts/zeit-deploy.js ",\n    "------CI Parallel tasks (as in .ci_config)": "",\n    "test1:unit": "npm run test:unit",\n    "test2:visual": "npm run test:visual",\n    "test3:e2e": "YOSHI_PROTRACTOR_CONFIG=./protractor1.conf.js npm run test:e2e",\n    "test4:e2e": "YOSHI_PROTRACTOR_CONFIG=./protractor2.conf.js npm run test:e2e",\n    "test5:types": "npm run test:types",\n    "test6:sanity": "npm run lint && npm run sanity",\n    "test7:performance": "npm run test:performance",\n    "test8:chromatic": "echo ok",\n    "------performance analysis tools": "",\n    "bundles:analyse": "npm run analyse --prefix .perfer",\n    "------can be removed?": "",\n    "storybook:named-imports": " npm run transpile && start-storybook -c ./test-runtime/imports/.storybook -p 6009",\n    "travis": "npm run lint && npm run proxy-wix-ui-icons && npm run transpile && npm run test:unit -- --maxWorkers=4",\n    "transpile:watch": "babel src --out-dir dist/es/src --copy-files --watch --plugins=@babel/plugin-syntax-dynamic-import",\n    "make-async-spec": "npx jscodeshift -t scripts/unidriver-migration/src/make-async/make-async.js",\n    "------END": ""\n  },\n  "husky": {\n    "hooks": {\n      "pre-commit": "lint-staged"\n    }\n  },\n  "yoshi": {\n    "entry": {\n      "app": "index.js"\n    },\n    "externals": {\n      "react": "React",\n      "react-dom": "ReactDOM",\n      "Wix": "Wix"\n    },\n    "externalUnprocessedModules": [\n      "get-own-enumerable-property-symbols",\n      "stringify-object"\n    ],\n    "exports": "wix-style-react"\n  },\n  "repository": {\n    "type": "git",\n    "url": "git+https://github.com/wix/wix-style-react.git"\n  },\n  "license": "MIT",\n  "bugs": {\n    "url": "https://github.com/wix/wix-style-react/issues"\n  },\n  "homepage": "https://github.com/wix/wix-style-react#readme",\n  "devDependencies": {\n    "@applitools/eyes-storybook": "^3.2.5",\n    "@babel/cli": "^7.2.3",\n    "@babel/core": "^7.2.2",\n    "@babel/parser": "^7.3.1",\n    "@babel/plugin-proposal-class-properties": "^7.3.0",\n    "@babel/plugin-proposal-export-namespace-from": "^7.2.0",\n    "@babel/plugin-transform-modules-commonjs": "^7.2.0",\n    "@babel/plugin-transform-runtime": "7.2.0",\n    "@babel/preset-env": "^7.3.1",\n    "@babel/preset-react": "^7.0.0",\n    "@babel/register": "^7.8.3",\n    "@storybook/addon-google-analytics": "^5.3.0",\n    "@storybook/addon-links": "^5.3.0",\n    "@storybook/addon-options": "^5.3.0",\n    "@storybook/react": "^5.3.0",\n    "@stylable/dom-test-kit": "^0.1.6",\n    "@testing-library/react": "^8.0.1",\n    "@types/enzyme": "^3.9.1",\n    "@types/node": "^12.12.22",\n    "@types/react": "16.8.4",\n    "@types/react-dom": "^16.0.5",\n    "@ui-autotools/registry": "^3.4.0",\n    "@ui-autotools/sanity": "^2.8.2",\n    "babel-loader": "^8.0.5",\n    "babel-plugin-dynamic-import-node": "^2.3.0",\n    "babel-preset-yoshi": "^4.23.0",\n    "concurrently": "^3.4.0",\n    "copy": "^0.3.2",\n    "enzyme": "^3.3.0",\n    "enzyme-adapter-react-16": "^1.2.0",\n    "eslint-plugin-react": "^6.8.0",\n    "execa": "^1.0.0",\n    "express": "^4.16.4",\n    "eyes.it": "^2.0.0",\n    "husky": "^2.3.0",\n    "identity-obj-proxy": "^3.0.0",\n    "import-path": "^1.0.0",\n    "jest-yoshi-preset": "^4.10.3",\n    "lint-staged": "^7.3.0",\n    "mkdirp": "^0.5.1",\n    "ora": "^3.0.0",\n    "progress": "^2.0.3",\n    "prompts": "^1.2.1",\n    "protractor": "^5.4.1",\n    "puppeteer": "^1.12.2",\n    "query-string": "^6.1.0",\n    "react": "~16.8.3",\n    "react-dnd-test-backend": "^5.0.1",\n    "react-dom": "~16.8.3",\n    "react-element-to-jsx-string": "^14.0.0",\n    "react-test-renderer": "^16.0.0",\n    "react-test-utils": "^0.0.1",\n    "regenerator-runtime": "^0.11.0",\n    "rimraf": "^2.6.3",\n    "sinon": "^1.17.6",\n    "storybook-addon-i18n": "^5.1.13",\n    "jest": "^24.9.0",\n    "storybook-chromatic": "^3.5.0",\n    "storybook-snapper": "^1.0.8",\n    "typescript": "~3.7.5",\n    "velocity": "^0.7.2",\n    "wait-for-cond": "^1.0.3",\n    "webpack": "^4.41.1",\n    "webpack-cli": "^3.2.3",\n    "wix-storybook-utils": "^3.0.66",\n    "wix-ui-framework": "^3.1.1",\n    "yoshi": "^4.19.0",\n    "yoshi-config": "^4.17.0",\n    "yoshi-helpers": "^4.18.0",\n    "yoshi-runtime": "^1.0.190",\n    "yoshi-style-dependencies": "^4.22.0"\n  },\n  "peerDependencies": {\n    "react": "^16.0.0",\n    "react-dom": "^16.0.0"\n  },\n  "publishConfig": {\n    "registry": "https://registry.npmjs.org/",\n    "logLevel": "verbose"\n  },\n  "dependencies": {\n    "@babel/runtime": "^7.3.1",\n    "@loadable/component": "^5.10.3",\n    "bootstrap-sass": "^3.3.7",\n    "classnames": "^2.2.5",\n    "color": "^2.0.0",\n    "create-react-context": "^0.2.2",\n    "css-element-queries": "^1.1.1",\n    "date-fns": "^1.29.0",\n    "difference": "^1.0.2",\n    "dnd-core": "^2.6.0",\n    "draft-convert": "^2.1.8",\n    "draft-js": "^0.10.5",\n    "draft-js-export-html": "^1.3.3",\n    "gradient-parser": "^0.1.5",\n    "hoist-non-react-methods": "^1.1.0",\n    "lodash": "^4.17.4",\n    "moment": "2.22.2",\n    "omit": "^1.0.1",\n    "popper.js": "^1.14.5",\n    "prop-types": "^15.5.8",\n    "rc-slider": "^9.2.0",\n    "react-collapse": "^4.0.3",\n    "react-day-picker": "^7.0.7",\n    "react-dnd": "^2.5.1",\n    "react-dnd-html5-backend": "^5.0.1",\n    "react-modal": "^3.3.2",\n    "react-motion": "^0.5.2",\n    "react-portal": "^4.1.5",\n    "react-slick": "^0.24.0",\n    "react-transition-group": "^2.2.1",\n    "react-window": "^1.7.1",\n    "shallowequal": "^1.1.0",\n    "slick-carousel": "^1.8.1",\n    "wix-animations": "^1.0.276",\n    "wix-eventually": "^2.2.0",\n    "wix-ui-backoffice": "^1.0.339",\n    "wix-ui-core": "^2.0.831",\n    "wix-ui-icons-common": "^2.0.60",\n    "wix-ui-test-utils": "^1.0.151"\n  },\n  "lint-staged": {\n    "linters": {\n      "*.{js,scss}": [\n        "yoshi lint --fix",\n        "git add"\n      ]\n    },\n    "ignore": [\n      ".wuf/generator/templates/**"\n    ]\n  },\n  "jest": {\n    "setupFiles": [\n      "<rootDir>/test/jest-setup.js"\n    ],\n    "setupFilesAfterEnv": [\n      "wix-ui-test-utils/jest-setup"\n    ],\n    "moduleNameMapper": {\n      "\\\\.(?!\\\\st).(css|less|scss)$": "identity-obj-proxy"\n    },\n    "testPathIgnorePatterns": [\n      "<rootDir>/dist/",\n      "<rootDir>/node_modules/",\n      "<rootDir>/test-runtime/",\n      "<rootDir>/.wuf"\n    ]\n  },\n  "eslintConfig": {\n    "extends": "yoshi",\n    "env": {\n      "jest": true\n    },\n    "parserOptions": {\n      "ecmaFeatures": {\n        "legacyDecorators": true\n      }\n    },\n    "rules": {\n      "import/no-unresolved": 0,\n      "jsx-a11y/alt-text": 0,\n      "jsx-a11y/anchor-is-valid": 0,\n      "react/forbid-foreign-prop-types": 0,\n      "react/jsx-handler-names": 0,\n      "react/no-find-dom-node": 0,\n      "react/no-string-refs": 0,\n      "react/jsx-boolean-value": 2,\n      "no-restricted-properties": [\n        "error",\n        {\n          "object": "browser",\n          "property": "pause",\n          "message": "Do not commit browser.pause()."\n        },\n        {\n          "object": "browser",\n          "property": "sleep",\n          "message": "Do not commit browser.sleep()."\n        },\n        {\n          "object": "eyes",\n          "property": "fit",\n          "message": "Do not commit eyes.fit()."\n        }\n      ],\n      "no-restricted-globals": [\n        "error",\n        "fdescribe",\n        "fit",\n        {\n          "name": "Proxy",\n          "message": "Proxy not supported in IE11."\n        }\n      ],\n      "no-restricted-imports": [\n        "error",\n        {\n          "patterns": [\n            "wix-ui-core/*",\n            "!wix-ui-core/dist",\n            "!wix-ui-core/drivers"\n          ],\n          "paths": [\n            {\n              "name": "lodash/isObject",\n              "message": "Please use {isObject} from src/utils/operators"\n            },\n            {\n              "name": "lodash/mapValue",\n              "message": "Please use {mapValue} from src/utils/operators"\n            },\n            {\n              "name": "lodash/pick",\n              "message": "Please use {pick} from src/utils/operators"\n            },\n            {\n              "name": "lodash/pickBy",\n              "message": "Please use {pickBy} from src/utils/operators"\n            },\n            {\n              "name": "lodash/range",\n              "message": "Please use {range} from src/utils/operators"\n            },\n            {\n              "name": "lodash/times",\n              "message": "Please use {times} from src/utils/operators"\n            },\n            {\n              "name": "lodash/values",\n              "message": "Please use {values} from src/utils/operators"\n            }\n          ]\n        }\n      ],\n      "no-console": "error"\n    },\n    "overrides": [\n      {\n        "files": [\n          "**/*.uni.driver.js"\n        ],\n        "rules": {\n          "no-restricted-imports": [\n            "error",\n            {\n              "patterns": [\n                "*.st.css",\n                "*.scss"\n              ]\n            }\n          ],\n          "no-restricted-properties": [\n            "error",\n            {\n              "property": "getNative",\n              "message": "Do not use getNative() in Unidrivers unless a method needs to return an HTMLElement (In which case, that method also need to be deprecated!)."\n            }\n          ]\n        }\n      },\n      {\n        "files": [\n          "**/*private.uni.driver.js"\n        ],\n        "rules": {\n          "no-restricted-properties": [\n            "off",\n            {\n              "property": "getNative",\n              "message": "getNative is allowed in private drivers"\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n',
//   },
// };
//
// const filesToFail = {
//   'src/Box/Box.js': {
//     contentFromPr:
//       'import React from \'react\';\nimport PropTypes from \'prop-types\';\nimport classNames from \'classnames\';\n\nimport colors from \'../colors.scss\';\nimport styles from \'./Box.scss\';\n\n/** Defined according to the design system */\nexport const spacingUnit = 6;\n\nconst directions = {\n  horizontal: styles.horizontal,\n  vertical: styles.vertical,\n};\nconst horizontalAlignmentValues = {\n  left: styles.left,\n  center: styles.center,\n  right: styles.right,\n  \'space-between\': styles.spaceBetween,\n};\nconst verticalAlignmentValues = {\n  top: styles.top,\n  middle: styles.middle,\n  bottom: styles.bottom,\n  \'space-between\': styles.spaceBetween,\n};\nconst spacingValues = {\n  tiny: `${spacingUnit}px`,\n  small: `${spacingUnit * 2}px`,\n  medium: `${spacingUnit * 3}px`,\n  large: `${spacingUnit * 4}px`,\n};\n\n/** In case the value is a number, it\'s multiplied by the defined spacing unit.\n *  Otherwise - there\'re two options:\n *   1. A predefined spacing value with semantic name (tiny, small, etc.)\n *   2. Space-separated values that are represented by a string (for example: "3px 3px")\n * */\nconst formatSpacingValue = value =>\n  isFinite(value)\n    ? `${value * spacingUnit}px`\n    : spacingValues[value] || `${value}`;\n\nconst Box = ({\n  dataHook,\n  children,\n  className,\n  style,\n  inline,\n  direction,\n  align,\n  verticalAlign,\n  padding,\n  paddingTop,\n  paddingRight,\n  paddingBottom,\n  paddingLeft,\n  margin,\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  minWidth,\n  maxWidth,\n  width,\n  minHeight,\n  maxHeight,\n  height,\n  color,\n  backgroundColor,\n  border,\n  borderColor,\n  borderTopColor,\n  borderRightColor,\n  borderBottomColor,\n  borderLeftColor,\n\n  // Excluded props (which are handled above and should not be spread into `style`)\n  \'data-hook\': dataHookByKebabCase,\n  flexDirection,\n  justifyContent,\n  alignItems,\n\n  ...nativeStyles\n}) => {\n  const rootClassNames = classNames(styles.root, className, {\n    [styles.inline]: inline,\n\n    // Alignment\n    [directions[direction]]: direction,\n    [horizontalAlignmentValues[align]]: align,\n    [verticalAlignmentValues[verticalAlign]]: verticalAlign,\n  });\n  const rootStyles = {\n    ...style,\n\n    // Spacing\n    padding: formatSpacingValue(padding),\n    paddingTop: formatSpacingValue(paddingTop),\n    paddingRight: formatSpacingValue(paddingRight),\n    paddingBottom: formatSpacingValue(paddingBottom),\n    paddingLeft: formatSpacingValue(paddingLeft),\n    margin: formatSpacingValue(margin),\n    marginTop: formatSpacingValue(marginTop),\n    marginRight: formatSpacingValue(marginRight),\n    marginBottom: formatSpacingValue(marginBottom),\n    marginLeft: formatSpacingValue(marginLeft),\n\n    // Sizing\n    minWidth: `${minWidth}`,\n    maxWidth: `${maxWidth}`,\n    width: `${width}`,\n    minHeight: `${minHeight}`,\n    maxHeight: `${maxHeight}`,\n    height: `${height}`,\n\n    // Styling\n    color: colors[color] || color,\n    backgroundColor: colors[backgroundColor] || backgroundColor,\n    border, // Must be assigned before the border color props (otherwise it would override them)\n\n    // Props which are spread just in case these are actually defined\n    ...(borderColor && {\n      borderColor: colors[borderColor] || borderColor,\n    }),\n    ...(borderTopColor && {\n      borderTopColor: colors[borderTopColor] || borderTopColor,\n    }),\n    ...(borderRightColor && {\n      borderRightColor: colors[borderRightColor] || borderRightColor,\n    }),\n    ...(borderBottomColor && {\n      borderBottomColor: colors[borderBottomColor] || borderBottomColor,\n    }),\n    ...(borderLeftColor && {\n      borderLeftColor: colors[borderLeftColor] || borderLeftColor,\n    }),\n\n    // All other props which are passed (without those that are specified above)\n    ...nativeStyles,\n  };\n\n  return (\n    <div data-hook={dataHook} className={rootClassNames} style={rootStyles}>\n      {children}\n    </div>\n  );\n};\n\nBox.displayName = \'Box\';\n\nBox.propTypes = {\n  /** Any element to be rendered inside */\n  children: PropTypes.node,\n  /** Define styles through a classname */\n  className: PropTypes.string,\n  /** Defines if the box behaves as an inline element */\n  inline: PropTypes.string,\n  /** Defines how the children are ordered (horizontally or vertically) */\n  direction: PropTypes.oneOf(Object.keys(directions)),\n  /** Defines how the children are aligned according to the X axis */\n  align: PropTypes.oneOf(Object.keys(horizontalAlignmentValues)),\n  /** Defines how the children are aligned according to the Y axis */\n  verticalAlign: PropTypes.oneOf(Object.keys(verticalAlignmentValues)),\n  /** Sets padding on all sides.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  padding: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the top.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the right.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingRight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the bottom.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingBottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the left.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingLeft: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on all sides.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  margin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the top.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the right.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginRight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the bottom.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginBottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the left.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginLeft: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the minimum width of the box (pixels) */\n  minWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the maximum width of the box (pixels) */\n  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the width of the box (pixels) */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the minimum height of the box (pixels) */\n  minHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the maximum height of the box (pixels) */\n  maxHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the height of the box (pixels) */\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets a text color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  color: PropTypes.string,\n  /** Sets a background color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  backgroundColor: PropTypes.string,\n  /** Sets a border color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderColor: PropTypes.string,\n  /** Sets a border top color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderTopColor: PropTypes.string,\n  /** Sets a border right color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderRightColor: PropTypes.string,\n  /** Sets a border bottom color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderBottomColor: PropTypes.string,\n  /** Sets a border left color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderLeftColor: PropTypes.string,\n  /** Applied as data-hook HTML attribute that can be used in the tests */\n  dataHook: PropTypes.string,\n};\n\nBox.defaultProps = {\n  direction: \'horizontal\',\n  inline: false,\n};\n\nexport default Box;\n',
//     contentFromMaster:
//       'import React from \'react\';\nimport PropTypes from \'prop-types\';\nimport classNames from \'classnames\';\n\nimport colors from \'../colors.scss\';\nimport styles from \'./Box.scss\';\n\n/** Defined according to the design system */\nexport const spacingUnit = 6;\n\nconst directions = {\n  horizontal: styles.horizontal,\n  vertical: styles.vertical,\n};\nconst horizontalAlignmentValues = {\n  left: styles.left,\n  center: styles.center,\n  right: styles.right,\n  \'space-between\': styles.spaceBetween,\n};\nconst verticalAlignmentValues = {\n  top: styles.top,\n  middle: styles.middle,\n  bottom: styles.bottom,\n  \'space-between\': styles.spaceBetween,\n};\nconst spacingValues = {\n  tiny: `${spacingUnit}px`,\n  small: `${spacingUnit * 2}px`,\n  medium: `${spacingUnit * 3}px`,\n  large: `${spacingUnit * 4}px`,\n};\n\n/** In case the value is a number, it\'s multiplied by the defined spacing unit.\n *  Otherwise - there\'re two options:\n *   1. A predefined spacing value with semantic name (tiny, small, etc.)\n *   2. Space-separated values that are represented by a string (for example: "3px 3px")\n * */\nconst formatSpacingValue = value =>\n  isFinite(value)\n    ? `${value * spacingUnit}px`\n    : spacingValues[value] || `${value}`;\n\nconst Box = ({\n  dataHook,\n  children,\n  className,\n  style,\n  inline,\n  direction,\n  align,\n  verticalAlign,\n  padding,\n  paddingTop,\n  paddingRight,\n  paddingBottom,\n  paddingLeft,\n  margin,\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  minWidth,\n  maxWidth,\n  width,\n  minHeight,\n  maxHeight,\n  height,\n  color,\n  backgroundColor,\n  border,\n  borderColor,\n  borderTopColor,\n  borderRightColor,\n  borderBottomColor,\n  borderLeftColor,\n\n  // Excluded props (which are handled above and should not be spread into `style`)\n  \'data-hook\': dataHookByKebabCase,\n  flexDirection,\n  justifyContent,\n  alignItems,\n\n  ...nativeStyles\n}) => {\n  const rootClassNames = classNames(styles.root, className, {\n    [styles.inline]: inline,\n\n    // Alignment\n    [directions[direction]]: direction,\n    [horizontalAlignmentValues[align]]: align,\n    [verticalAlignmentValues[verticalAlign]]: verticalAlign,\n  });\n  const rootStyles = {\n    ...style,\n\n    // Spacing\n    padding: formatSpacingValue(padding),\n    paddingTop: formatSpacingValue(paddingTop),\n    paddingRight: formatSpacingValue(paddingRight),\n    paddingBottom: formatSpacingValue(paddingBottom),\n    paddingLeft: formatSpacingValue(paddingLeft),\n    margin: formatSpacingValue(margin),\n    marginTop: formatSpacingValue(marginTop),\n    marginRight: formatSpacingValue(marginRight),\n    marginBottom: formatSpacingValue(marginBottom),\n    marginLeft: formatSpacingValue(marginLeft),\n\n    // Sizing\n    minWidth: `${minWidth}`,\n    maxWidth: `${maxWidth}`,\n    width: `${width}`,\n    minHeight: `${minHeight}`,\n    maxHeight: `${maxHeight}`,\n    height: `${height}`,\n\n    // Styling\n    color: colors[color] || color,\n    backgroundColor: colors[backgroundColor] || backgroundColor,\n    border, // Must be assigned before the border color props (otherwise it would override them)\n\n    // Props which are spread just in case these are actually defined\n    ...(borderColor && {\n      borderColor: colors[borderColor] || borderColor,\n    }),\n    ...(borderTopColor && {\n      borderTopColor: colors[borderTopColor] || borderTopColor,\n    }),\n    ...(borderRightColor && {\n      borderRightColor: colors[borderRightColor] || borderRightColor,\n    }),\n    ...(borderBottomColor && {\n      borderBottomColor: colors[borderBottomColor] || borderBottomColor,\n    }),\n    ...(borderLeftColor && {\n      borderLeftColor: colors[borderLeftColor] || borderLeftColor,\n    }),\n\n    // All other props which are passed (without those that are specified above)\n    ...nativeStyles,\n  };\n\n  return (\n    <div data-hook={dataHook} className={rootClassNames} style={rootStyles}>\n      {children}\n    </div>\n  );\n};\n\nBox.displayName = \'Box\';\n\nBox.propTypes = {\n  /** Any element to be rendered inside */\n  children: PropTypes.node,\n  /** Define styles through a classname */\n  className: PropTypes.string,\n  /** Defines if the box behaves as an inline element */\n  inline: PropTypes.bool,\n  /** Defines how the children are ordered (horizontally or vertically) */\n  direction: PropTypes.oneOf(Object.keys(directions)),\n  /** Defines how the children are aligned according to the X axis */\n  align: PropTypes.oneOf(Object.keys(horizontalAlignmentValues)),\n  /** Defines how the children are aligned according to the Y axis */\n  verticalAlign: PropTypes.oneOf(Object.keys(verticalAlignmentValues)),\n  /** Sets padding on all sides.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  padding: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the top.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the right.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingRight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the bottom.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingBottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the left.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingLeft: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on all sides.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  margin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the top.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the right.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginRight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the bottom.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginBottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the left.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginLeft: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the minimum width of the box (pixels) */\n  minWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the maximum width of the box (pixels) */\n  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the width of the box (pixels) */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the minimum height of the box (pixels) */\n  minHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the maximum height of the box (pixels) */\n  maxHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the height of the box (pixels) */\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets a text color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  color: PropTypes.string,\n  /** Sets a background color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  backgroundColor: PropTypes.string,\n  /** Sets a border color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderColor: PropTypes.string,\n  /** Sets a border top color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderTopColor: PropTypes.string,\n  /** Sets a border right color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderRightColor: PropTypes.string,\n  /** Sets a border bottom color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderBottomColor: PropTypes.string,\n  /** Sets a border left color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderLeftColor: PropTypes.string,\n  /** Applied as data-hook HTML attribute that can be used in the tests */\n  dataHook: PropTypes.string,\n};\n\nBox.defaultProps = {\n  direction: \'horizontal\',\n  inline: false,\n};\n\nexport default Box;\n',
//   },
// };
//
// const filesToPass = {
//   'src/Box/index.d.ts': {
//     contentFromPr:
//       "import * as React from 'react';\nimport {Omit} from '../common';\n\nexport interface BoxProps extends Omit<React.CSSProperties, 'direction'> {\n  inline?: string;\n  className?: string;\n  direction?: BoxDirection;\n  align?: BoxHorizontalAlignment;\n  verticalAlign?: BoxVerticalAlignment;\n  dataHook?: string;\n  padding?: BoxCssSizingProperty;\n  paddingTop?: BoxCssSizingProperty;\n  paddingRight?: BoxCssSizingProperty;\n  paddingBottom?: BoxCssSizingProperty;\n  paddingLeft?: BoxCssSizingProperty;\n  margin?: BoxCssSizingProperty;\n  marginTop?: BoxCssSizingProperty;\n  marginRight?: BoxCssSizingProperty;\n  marginBottom?: BoxCssSizingProperty;\n  marginLeft?: BoxCssSizingProperty;\n  minWidth?: BoxCssSizingProperty;\n  maxWidth?: BoxCssSizingProperty;\n  width?: BoxCssSizingProperty;\n  minHeight?: BoxCssSizingProperty;\n  maxHeight?: BoxCssSizingProperty;\n  height?: BoxCssSizingProperty;\n}\n\ndeclare const Box: React.SFC<BoxProps>;\nexport default Box;\n\nexport type BoxDirection = 'horizontal' | 'vertical';\n\nexport type BoxHorizontalAlignment =\n  | 'left'\n  | 'center'\n  | 'right'\n  | 'space-between';\n\nexport type BoxVerticalAlignment =\n  | 'top'\n  | 'middle'\n  | 'bottom'\n  | 'space-between';\n\nexport type BoxSpacing = 'tiny' | 'small' | 'medium' | 'large';\n\ntype BoxCssSizingProperty = string | number;\n",
//     contentFromMaster:
//       "import * as React from 'react';\nimport {Omit} from '../common';\n\nexport interface BoxProps extends Omit<React.CSSProperties, 'direction'> {\n  inline?: boolean;\n  className?: string;\n  direction?: BoxDirection;\n  align?: BoxHorizontalAlignment;\n  verticalAlign?: BoxVerticalAlignment;\n  dataHook?: string;\n  padding?: BoxCssSizingProperty;\n  paddingTop?: BoxCssSizingProperty;\n  paddingRight?: BoxCssSizingProperty;\n  paddingBottom?: BoxCssSizingProperty;\n  paddingLeft?: BoxCssSizingProperty;\n  margin?: BoxCssSizingProperty;\n  marginTop?: BoxCssSizingProperty;\n  marginRight?: BoxCssSizingProperty;\n  marginBottom?: BoxCssSizingProperty;\n  marginLeft?: BoxCssSizingProperty;\n  minWidth?: BoxCssSizingProperty;\n  maxWidth?: BoxCssSizingProperty;\n  width?: BoxCssSizingProperty;\n  minHeight?: BoxCssSizingProperty;\n  maxHeight?: BoxCssSizingProperty;\n  height?: BoxCssSizingProperty;\n}\n\ndeclare const Box: React.SFC<BoxProps>;\nexport default Box;\n\nexport type BoxDirection = 'horizontal' | 'vertical';\n\nexport type BoxHorizontalAlignment =\n  | 'left'\n  | 'center'\n  | 'right'\n  | 'space-between';\n\nexport type BoxVerticalAlignment =\n  | 'top'\n  | 'middle'\n  | 'bottom'\n  | 'space-between';\n\nexport type BoxSpacing = 'tiny' | 'small' | 'medium' | 'large';\n\ntype BoxCssSizingProperty = string | number;\n",
//   },
//   'src/Box/Box.js': {
//     contentFromPr:
//       'import React from \'react\';\nimport PropTypes from \'prop-types\';\nimport classNames from \'classnames\';\n\nimport colors from \'../colors.scss\';\nimport styles from \'./Box.scss\';\n\n/** Defined according to the design system */\nexport const spacingUnit = 6;\n\nconst directions = {\n  horizontal: styles.horizontal,\n  vertical: styles.vertical,\n};\nconst horizontalAlignmentValues = {\n  left: styles.left,\n  center: styles.center,\n  right: styles.right,\n  \'space-between\': styles.spaceBetween,\n};\nconst verticalAlignmentValues = {\n  top: styles.top,\n  middle: styles.middle,\n  bottom: styles.bottom,\n  \'space-between\': styles.spaceBetween,\n};\nconst spacingValues = {\n  tiny: `${spacingUnit}px`,\n  small: `${spacingUnit * 2}px`,\n  medium: `${spacingUnit * 3}px`,\n  large: `${spacingUnit * 4}px`,\n};\n\n/** In case the value is a number, it\'s multiplied by the defined spacing unit.\n *  Otherwise - there\'re two options:\n *   1. A predefined spacing value with semantic name (tiny, small, etc.)\n *   2. Space-separated values that are represented by a string (for example: "3px 3px")\n * */\nconst formatSpacingValue = value =>\n  isFinite(value)\n    ? `${value * spacingUnit}px`\n    : spacingValues[value] || `${value}`;\n\nconst Box = ({\n  dataHook,\n  children,\n  className,\n  style,\n  inline,\n  direction,\n  align,\n  verticalAlign,\n  padding,\n  paddingTop,\n  paddingRight,\n  paddingBottom,\n  paddingLeft,\n  margin,\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  minWidth,\n  maxWidth,\n  width,\n  minHeight,\n  maxHeight,\n  height,\n  color,\n  backgroundColor,\n  border,\n  borderColor,\n  borderTopColor,\n  borderRightColor,\n  borderBottomColor,\n  borderLeftColor,\n\n  // Excluded props (which are handled above and should not be spread into `style`)\n  \'data-hook\': dataHookByKebabCase,\n  flexDirection,\n  justifyContent,\n  alignItems,\n\n  ...nativeStyles\n}) => {\n  const rootClassNames = classNames(styles.root, className, {\n    [styles.inline]: inline,\n\n    // Alignment\n    [directions[direction]]: direction,\n    [horizontalAlignmentValues[align]]: align,\n    [verticalAlignmentValues[verticalAlign]]: verticalAlign,\n  });\n  const rootStyles = {\n    ...style,\n\n    // Spacing\n    padding: formatSpacingValue(padding),\n    paddingTop: formatSpacingValue(paddingTop),\n    paddingRight: formatSpacingValue(paddingRight),\n    paddingBottom: formatSpacingValue(paddingBottom),\n    paddingLeft: formatSpacingValue(paddingLeft),\n    margin: formatSpacingValue(margin),\n    marginTop: formatSpacingValue(marginTop),\n    marginRight: formatSpacingValue(marginRight),\n    marginBottom: formatSpacingValue(marginBottom),\n    marginLeft: formatSpacingValue(marginLeft),\n\n    // Sizing\n    minWidth: `${minWidth}`,\n    maxWidth: `${maxWidth}`,\n    width: `${width}`,\n    minHeight: `${minHeight}`,\n    maxHeight: `${maxHeight}`,\n    height: `${height}`,\n\n    // Styling\n    color: colors[color] || color,\n    backgroundColor: colors[backgroundColor] || backgroundColor,\n    border, // Must be assigned before the border color props (otherwise it would override them)\n\n    // Props which are spread just in case these are actually defined\n    ...(borderColor && {\n      borderColor: colors[borderColor] || borderColor,\n    }),\n    ...(borderTopColor && {\n      borderTopColor: colors[borderTopColor] || borderTopColor,\n    }),\n    ...(borderRightColor && {\n      borderRightColor: colors[borderRightColor] || borderRightColor,\n    }),\n    ...(borderBottomColor && {\n      borderBottomColor: colors[borderBottomColor] || borderBottomColor,\n    }),\n    ...(borderLeftColor && {\n      borderLeftColor: colors[borderLeftColor] || borderLeftColor,\n    }),\n\n    // All other props which are passed (without those that are specified above)\n    ...nativeStyles,\n  };\n\n  return (\n    <div data-hook={dataHook} className={rootClassNames} style={rootStyles}>\n      {children}\n    </div>\n  );\n};\n\nBox.displayName = \'Box\';\n\nBox.propTypes = {\n  /** Any element to be rendered inside */\n  children: PropTypes.node,\n  /** Define styles through a classname */\n  className: PropTypes.string,\n  /** Defines if the box behaves as an inline element */\n  inline: PropTypes.string,\n  /** Defines how the children are ordered (horizontally or vertically) */\n  direction: PropTypes.oneOf(Object.keys(directions)),\n  /** Defines how the children are aligned according to the X axis */\n  align: PropTypes.oneOf(Object.keys(horizontalAlignmentValues)),\n  /** Defines how the children are aligned according to the Y axis */\n  verticalAlign: PropTypes.oneOf(Object.keys(verticalAlignmentValues)),\n  /** Sets padding on all sides.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  padding: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the top.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the right.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingRight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the bottom.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingBottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the left.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingLeft: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on all sides.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  margin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the top.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the right.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginRight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the bottom.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginBottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the left.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginLeft: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the minimum width of the box (pixels) */\n  minWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the maximum width of the box (pixels) */\n  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the width of the box (pixels) */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the minimum height of the box (pixels) */\n  minHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the maximum height of the box (pixels) */\n  maxHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the height of the box (pixels) */\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets a text color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  color: PropTypes.string,\n  /** Sets a background color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  backgroundColor: PropTypes.string,\n  /** Sets a border color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderColor: PropTypes.string,\n  /** Sets a border top color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderTopColor: PropTypes.string,\n  /** Sets a border right color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderRightColor: PropTypes.string,\n  /** Sets a border bottom color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderBottomColor: PropTypes.string,\n  /** Sets a border left color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderLeftColor: PropTypes.string,\n  /** Applied as data-hook HTML attribute that can be used in the tests */\n  dataHook: PropTypes.string,\n};\n\nBox.defaultProps = {\n  direction: \'horizontal\',\n  inline: false,\n};\n\nexport default Box;\n',
//     contentFromMaster:
//       'import React from \'react\';\nimport PropTypes from \'prop-types\';\nimport classNames from \'classnames\';\n\nimport colors from \'../colors.scss\';\nimport styles from \'./Box.scss\';\n\n/** Defined according to the design system */\nexport const spacingUnit = 6;\n\nconst directions = {\n  horizontal: styles.horizontal,\n  vertical: styles.vertical,\n};\nconst horizontalAlignmentValues = {\n  left: styles.left,\n  center: styles.center,\n  right: styles.right,\n  \'space-between\': styles.spaceBetween,\n};\nconst verticalAlignmentValues = {\n  top: styles.top,\n  middle: styles.middle,\n  bottom: styles.bottom,\n  \'space-between\': styles.spaceBetween,\n};\nconst spacingValues = {\n  tiny: `${spacingUnit}px`,\n  small: `${spacingUnit * 2}px`,\n  medium: `${spacingUnit * 3}px`,\n  large: `${spacingUnit * 4}px`,\n};\n\n/** In case the value is a number, it\'s multiplied by the defined spacing unit.\n *  Otherwise - there\'re two options:\n *   1. A predefined spacing value with semantic name (tiny, small, etc.)\n *   2. Space-separated values that are represented by a string (for example: "3px 3px")\n * */\nconst formatSpacingValue = value =>\n  isFinite(value)\n    ? `${value * spacingUnit}px`\n    : spacingValues[value] || `${value}`;\n\nconst Box = ({\n  dataHook,\n  children,\n  className,\n  style,\n  inline,\n  direction,\n  align,\n  verticalAlign,\n  padding,\n  paddingTop,\n  paddingRight,\n  paddingBottom,\n  paddingLeft,\n  margin,\n  marginTop,\n  marginRight,\n  marginBottom,\n  marginLeft,\n  minWidth,\n  maxWidth,\n  width,\n  minHeight,\n  maxHeight,\n  height,\n  color,\n  backgroundColor,\n  border,\n  borderColor,\n  borderTopColor,\n  borderRightColor,\n  borderBottomColor,\n  borderLeftColor,\n\n  // Excluded props (which are handled above and should not be spread into `style`)\n  \'data-hook\': dataHookByKebabCase,\n  flexDirection,\n  justifyContent,\n  alignItems,\n\n  ...nativeStyles\n}) => {\n  const rootClassNames = classNames(styles.root, className, {\n    [styles.inline]: inline,\n\n    // Alignment\n    [directions[direction]]: direction,\n    [horizontalAlignmentValues[align]]: align,\n    [verticalAlignmentValues[verticalAlign]]: verticalAlign,\n  });\n  const rootStyles = {\n    ...style,\n\n    // Spacing\n    padding: formatSpacingValue(padding),\n    paddingTop: formatSpacingValue(paddingTop),\n    paddingRight: formatSpacingValue(paddingRight),\n    paddingBottom: formatSpacingValue(paddingBottom),\n    paddingLeft: formatSpacingValue(paddingLeft),\n    margin: formatSpacingValue(margin),\n    marginTop: formatSpacingValue(marginTop),\n    marginRight: formatSpacingValue(marginRight),\n    marginBottom: formatSpacingValue(marginBottom),\n    marginLeft: formatSpacingValue(marginLeft),\n\n    // Sizing\n    minWidth: `${minWidth}`,\n    maxWidth: `${maxWidth}`,\n    width: `${width}`,\n    minHeight: `${minHeight}`,\n    maxHeight: `${maxHeight}`,\n    height: `${height}`,\n\n    // Styling\n    color: colors[color] || color,\n    backgroundColor: colors[backgroundColor] || backgroundColor,\n    border, // Must be assigned before the border color props (otherwise it would override them)\n\n    // Props which are spread just in case these are actually defined\n    ...(borderColor && {\n      borderColor: colors[borderColor] || borderColor,\n    }),\n    ...(borderTopColor && {\n      borderTopColor: colors[borderTopColor] || borderTopColor,\n    }),\n    ...(borderRightColor && {\n      borderRightColor: colors[borderRightColor] || borderRightColor,\n    }),\n    ...(borderBottomColor && {\n      borderBottomColor: colors[borderBottomColor] || borderBottomColor,\n    }),\n    ...(borderLeftColor && {\n      borderLeftColor: colors[borderLeftColor] || borderLeftColor,\n    }),\n\n    // All other props which are passed (without those that are specified above)\n    ...nativeStyles,\n  };\n\n  return (\n    <div data-hook={dataHook} className={rootClassNames} style={rootStyles}>\n      {children}\n    </div>\n  );\n};\n\nBox.displayName = \'Box\';\n\nBox.propTypes = {\n  /** Any element to be rendered inside */\n  children: PropTypes.node,\n  /** Define styles through a classname */\n  className: PropTypes.string,\n  /** Defines if the box behaves as an inline element */\n  inline: PropTypes.bool,\n  /** Defines how the children are ordered (horizontally or vertically) */\n  direction: PropTypes.oneOf(Object.keys(directions)),\n  /** Defines how the children are aligned according to the X axis */\n  align: PropTypes.oneOf(Object.keys(horizontalAlignmentValues)),\n  /** Defines how the children are aligned according to the Y axis */\n  verticalAlign: PropTypes.oneOf(Object.keys(verticalAlignmentValues)),\n  /** Sets padding on all sides.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  padding: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the top.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the right.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingRight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the bottom.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingBottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets padding on the left.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  paddingLeft: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on all sides.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  margin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the top.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the right.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginRight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the bottom.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginBottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets margin on the left.\n   * Accepts a numeric value (multiplied by spacing unit), predefined spacing value (tiny, small, etc.)\n   * or a string of space-separated values ("3px 3px") */\n  marginLeft: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the minimum width of the box (pixels) */\n  minWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the maximum width of the box (pixels) */\n  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the width of the box (pixels) */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the minimum height of the box (pixels) */\n  minHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the maximum height of the box (pixels) */\n  maxHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets the height of the box (pixels) */\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Sets a text color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  color: PropTypes.string,\n  /** Sets a background color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  backgroundColor: PropTypes.string,\n  /** Sets a border color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderColor: PropTypes.string,\n  /** Sets a border top color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderTopColor: PropTypes.string,\n  /** Sets a border right color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderRightColor: PropTypes.string,\n  /** Sets a border bottom color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderBottomColor: PropTypes.string,\n  /** Sets a border left color by a key from the color palette or natively supported value (Hex, RGB, etc.) */\n  borderLeftColor: PropTypes.string,\n  /** Applied as data-hook HTML attribute that can be used in the tests */\n  dataHook: PropTypes.string,\n};\n\nBox.defaultProps = {\n  direction: \'horizontal\',\n  inline: false,\n};\n\nexport default Box;\n',
//   },
// };
//
// // eslint-disable-next-line no-console
// console.log(verifyModifiedFiles(filesToPass));
